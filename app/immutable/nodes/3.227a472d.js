import{S as D,i as R,s as b,C as m,y as f,a as v,z as d,c as y,A as _,b as I,H as $,g,d as S,B as h,h as A}from"../chunks/index.a6e5a0ea.js";import{C as B}from"../chunks/isSymbol.4a57b641.js";import{C as H,d as i}from"../chunks/methods.24cfb888.js";import{g as L}from"../chunks/clsx.m.fec05fde.js";function T(a){let e,o,s,c;const r=[{inputLabel:C,inputValueStore:a[0],inputSize:w}];let u={};for(let t=0;t<r.length;t+=1)u=m(u,r[t]);e=new B({props:u});const p=[{outputRows:a[1],inputValueStore:a[0]}];let l={};for(let t=0;t<p.length;t+=1)l=m(l,p[t]);return s=new H({props:l}),{c(){f(e.$$.fragment),o=v(),f(s.$$.fragment)},l(t){d(e.$$.fragment,t),o=y(t),d(s.$$.fragment,t)},m(t,n){_(e,t,n),I(t,o,n),_(s,t,n),c=!0},p(t,[n]){const z=n&1?$(r,[{inputLabel:C,inputValueStore:t[0],inputSize:w}]):{};e.$set(z);const V=n&3?$(p,[{outputRows:t[1],inputValueStore:t[0]}]):{};s.$set(V)},i(t){c||(g(e.$$.fragment,t),g(s.$$.fragment,t),c=!0)},o(t){S(e.$$.fragment,t),S(s.$$.fragment,t),c=!1},d(t){h(e,t),t&&A(o),h(s,t)}}}const C="Text to Decode",w=2;function q(a){const e=L("decodeInput",""),o=[{cols:[{title:"URI Decoded",size:4,method:i.uri,send:!1}]},{cols:[{title:"HTML Decoded",size:4,method:i.html,send:!1}]},{cols:[{title:"BASE-64 Decoded",size:4,method:i.base64,send:!1}]}];return[e,o]}class U extends D{constructor(e){super(),R(this,e,q,T,b,{})}}export{U as component};
